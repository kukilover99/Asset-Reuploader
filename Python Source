import os
import json
import aiohttp
from aiohttp import web
import asyncio
import re
import time
from colorama import init, Fore, Style

init(autoreset=True)

P = 8080
C = 'Cookie.txt'
T = 30
MCR = 1000
MR = 1

class Cl:
    B = Fore.WHITE
    S = Fore.GREEN
    W = Fore.YELLOW
    E = Fore.RED
    R = Style.RESET_ALL

ss = {
    "rc": "",
    "ct": "",
    "uid": None
}

def vc(c):
    return c and len(c) > 100 and "_|WARNING:-DO-NOT-SHARE-THIS." in c

async def gui():
    async with aiohttp.ClientSession() as s:
        try:
            async with s.get(
                "https://users.roblox.com/v1/users/authenticated",
                headers={"Cookie": f".ROBLOSECURITY={ss['rc']}"},
                timeout=T
            ) as r:
                if r.status == 200:
                    d = await r.json()
                    return d.get("id")
        except Exception:
            pass
    return None

async def rct():
    async with aiohttp.ClientSession() as s:
        try:
            async with s.post(
                "https://auth.roblox.com/v2/logout",
                headers={
                    "Cookie": f".ROBLOSECURITY={ss['rc']}",
                    "User-Agent": "Roblox/WinInet"
                },
                timeout=T
            ) as r:
                if r.status == 403:
                    ct = r.headers.get("x-csrf-token")
                    if ct:
                        ss["ct"] = ct
                        return True
        except Exception:
            pass
    return False

async def fa(s, aid):
    try:
        async with s.get(
            f"https://assetdelivery.roblox.com/v1/asset/?id={aid}",
            headers={
                "Cookie": f".ROBLOSECURITY={ss['rc']}",
                "Accept": "application/octet-stream",
                "User-Agent": "Roblox/WinInet"
            },
            timeout=T
        ) as r:
            if r.status == 200:
                return await r.read()
    except Exception as e:
        print(f"{Cl.W}Error fetching animation ID: {aid} ({str(e)}){Cl.R}")
    return None

async def ua(s, ad, aid, retries=0):
    if not ss["ct"]:
        if not await rct():
            return None
    try:
        p = {
            "assetTypeName": "Animation",
            "name": f"Reupload_{aid}_{int(time.time())}",
            "description": "Automatically reuploaded",
            "ispublic": "False",
            "allowComments": "True",
            "groupId": "",
            "isGamesAsset": "False"
        }
        async with s.post(
            "https://www.roblox.com/ide/publish/uploadnewanimation",
            params=p,
            data=ad,
            headers={
                "Cookie": f".ROBLOSECURITY={ss['rc']}",
                "X-CSRF-TOKEN": ss["ct"],
                "Content-Type": "application/octet-stream",
                "User-Agent": "Roblox/WinInet",
                "Referer": "https://www.roblox.com/develop",
                "Origin": "https://www.roblox.com"
            },
            timeout=T
        ) as r:
            if r.status == 200:
                t = await r.text()
                m = re.search(r"\d{9,}", t)
                if m:
                    return m.group(0)
            elif r.status == 403:
                if await rct():
                    return await ua(s, ad, aid, retries)
    except Exception as e:
        if retries < MR:
            await asyncio.sleep(1)
            return await ua(s, ad, aid, retries + 1)
        print(f"{Cl.W}Failed to upload animation ID: {aid} ({str(e)}){Cl.R}")
    return None

async def pa(aids):
    ta = len(aids)
    res = [None] * ta
    logs = [None] * ta
    sr = 0
    fr = 0

    print(f"{Cl.B}Reuploading Animations, This Might Take Minutes...")

    st = time.time()

    async with aiohttp.ClientSession() as s:
        sm = asyncio.Semaphore(MCR)
        tasks = []

        async def psa(i, aid):
            nonlocal sr, fr
            async with sm:
                if not aid.isdigit():
                    log = f"{Cl.W}INVALID ANIMATION ID: {aid}{Cl.R}"
                    print(log)
                    fr += 1
                    return i, None, log

                ad = await fa(s, aid)
                if ad:
                    nid = await ua(s, ad, aid)
                    if nid:
                        log = f"{Cl.S}SUCCESSFUL REUPLOAD: {aid} â†’ {nid}{Cl.R}"
                        print(log)
                        sr += 1
                        return i, nid, log
                log = f"{Cl.E}FAILED REUPLOAD: {aid}{Cl.R}"
                print(log)
                fr += 1
                return i, None, log

        for idx, aid in enumerate(aids):
            tasks.append(psa(idx, aid))

        for task in asyncio.as_completed(tasks):
            idx, result, log = await task
            res[idx] = result
            logs[idx] = log

    et = time.time()

    print("\n--- FINAL LOGS (IN ORDER) ---")
    for log in logs:
        print(log)

    print("\n--- SUMMARY ---")
    print(f"{Cl.B}Total Animations Processed: {ta}")
    print(f"{Cl.S}Successful Reuploads: {sr}")
    print(f"{Cl.E}Failed Reuploads: {fr}")
    print(f"{Cl.B}Time Taken: {et - st:.2f} seconds")

    return {aid: nid for aid, nid in zip(aids, res) if nid}

async def hr(request):
    try:
        pd = await request.json()
        aids = pd.get("animationIds", [])
        if not aids:
            return web.json_response({"error": "No animation IDs provided"}, status=400)
        
        results = await pa(aids)
        return web.json_response(results, status=200)
    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

async def is_():
    if os.path.exists(C):
        with open(C, "r") as f:
            ss["rc"] = f.read().strip()
    if not vc(ss["rc"]):
        ss["rc"] = input("Enter .ROBLOSECURITY cookie: ").strip()
        if not vc(ss["rc"]):
            print(f"{Cl.E}Invalid cookie format{Cl.R}")
            exit(1)
        with open(C, "w") as f:
            f.write(ss["rc"])
    
    ss["uid"] = await gui()
    if not ss["uid"]:
        print(f"{Cl.E}Authentication failed{Cl.R}")
        exit(1)
    if not await rct():
        print(f"{Cl.E}CSRF token initialization failed{Cl.R}")
        exit(1)
    
    app = web.Application()
    app.router.add_post("/reupload", hr)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "localhost", P)
    print(f"{Cl.B}Server ready - use the plugin to submit animations{Cl.R}")
    await site.start()

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(is_())
